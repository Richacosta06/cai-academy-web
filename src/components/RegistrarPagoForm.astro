---
// src/components/RegistrarPagoForm.astro
interface Props {
  titulo?: string;
  metodosPago?: string[];
}

const {
  titulo = "Registrar Nuevo Pago",
  metodosPago = [
    "Tarjeta de Crédito/Débito",
    "Transferencia Bancaria (ACH)",
    "Yappy",
    "Nequi",
    "Efectivo (Secretaría)",
    "Otro",
  ],
} = Astro.props;

const today = new Date().toISOString().split("T")[0];
---

<div
  class="bg-[#2d3748] p-6 md:p-8 rounded-lg shadow-xl text-white w-full mx-auto"
>
  <h2 class="text-2xl font-semibold text-cai-gold mb-6">{titulo}</h2>
  <form id="registrar-pago-form" class="space-y-6">
    <div>
      <label
        for="fecha-pago"
        class="block text-sm font-medium mb-1 text-gray-300"
        >Fecha de Pago</label
      >
      <input
        type="date"
        id="fecha-pago"
        name="fechaPago"
        required
        max={today}
        class="w-full bg-[#374151] border border-gray-600 text-gray-200 rounded-md px-4 py-2.5 focus:border-cai-gold focus:ring-1 focus:ring-cai-gold/50 focus:outline-none transition-colors duration-200"
        placeholder="dd/mm/aaaa"
      />
    </div>

    <div>
      <label
        for="metodo-pago"
        class="block text-sm font-medium mb-1 text-gray-300"
        >Método de Pago</label
      >
      <select
        id="metodo-pago"
        name="metodoPago"
        required
        class="w-full bg-[#374151] border border-gray-600 text-gray-200 rounded-md px-4 py-2.5 focus:border-cai-gold focus:ring-1 focus:ring-cai-gold/50 focus:outline-none transition-colors duration-200 appearance-none bg-no-repeat bg-right pr-8"
        style="background-image: url('data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%239ca3af' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='M6 8l4 4 4-4'/%3e%3c/svg%3e'); background-position: right 0.5rem center; background-size: 1.5em 1.5em;"
      >
        <option value="" disabled selected class="text-gray-500"
          >Seleccione método...</option
        >
        {
          metodosPago.map((metodo) => (
            <option value={metodo} class="bg-[#2c3340] text-gray-200">
              {metodo}
            </option>
          ))
        }
      </select>
    </div>

    <div>
      <label
        for="numero-referencia"
        class="block text-sm font-medium mb-1 text-gray-300"
        >Número de Referencia/Comprobante</label
      >
      <input
        type="text"
        id="numero-referencia"
        name="numeroReferencia"
        required
        class="w-full bg-[#374151] border border-gray-600 text-gray-200 rounded-md px-4 py-2.5 focus:border-cai-gold focus:ring-1 focus:ring-cai-gold/50 focus:outline-none transition-colors duration-200"
        placeholder="Ej: Yappy #12345, ACH #67890"
      />
    </div>

    <div>
      <label
        for="monto-pagado"
        class="block text-sm font-medium mb-1 text-gray-300">Monto Pagado</label
      >
      <input
        type="number"
        id="monto-pagado"
        name="montoPagado"
        required
        min="0.01"
        step="0.01"
        class="w-full bg-[#374151] border border-gray-600 text-gray-200 rounded-md px-4 py-2.5 focus:border-cai-gold focus:ring-1 focus:ring-cai-gold/50 focus:outline-none transition-colors duration-200"
        placeholder="0.00"
      />
    </div>

    <div>
      <label
        for="adjuntar-comprobante-input"
        class="block text-sm font-medium mb-1 text-gray-300"
        >Adjuntar Comprobante (Opcional)</label
      >
      <div class="mt-1 flex items-center">
        <label
          for="adjuntar-comprobante-input"
          class="cursor-pointer bg-cai-gold text-cai-dark-bg font-medium py-2 px-4 rounded-md shadow-sm hover:bg-yellow-400 transition-colors duration-200 text-sm"
        >
          Seleccionar archivo
        </label>
        <input
          id="adjuntar-comprobante-input"
          name="comprobanteFile"
          type="file"
          class="sr-only"
          accept=".pdf,.jpg,.jpeg,.png"
        />
        <span id="file-chosen" class="ml-3 text-sm text-gray-400"
          >Ningún archivo seleccionado</span
        >
      </div>
      <p class="mt-1 text-xs text-gray-400">
        Formatos aceptados: PDF, JPG, PNG. Tamaño máximo: 5MB.
      </p>
    </div>

    <div class="pt-2 text-center">
      <button
        type="submit"
        class="bg-cai-gold text-cai-dark-bg font-semibold px-8 py-3 rounded-full text-lg shadow-[0_4px_10px_rgba(255,215,0,0.2)] hover:bg-yellow-400 hover:-translate-y-0.5 hover:shadow-[0_6px_15px_rgba(255,215,0,0.3)] transition-all duration-300 flex items-center justify-center gap-2 w-full md:w-auto mx-auto"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 20 20"
          fill="currentColor"
          class="w-5 h-5"
        >
          <path
            fill-rule="evenodd"
            d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z"
            clip-rule="evenodd"></path>
        </svg>
        <span>Registrar Pago</span>
      </button>
    </div>
  </form>
</div>

<script>
  const fileInput = document.getElementById(
    "adjuntar-comprobante-input"
  ) as HTMLInputElement | null;
  const fileChosenSpan = document.getElementById(
    "file-chosen"
  ) as HTMLSpanElement | null;
  const form = document.getElementById(
    "registrar-pago-form"
  ) as HTMLFormElement | null;

  if (fileInput && fileChosenSpan) {
    fileInput.addEventListener("change", function (this: HTMLInputElement) {
      if (this.files && this.files.length > 0) {
        fileChosenSpan.textContent = this.files[0].name;
      } else {
        fileChosenSpan.textContent = "Ningún archivo seleccionado";
      }
    });
  }

  if (form) {
    form.addEventListener("submit", function (event: SubmitEvent) {
      event.preventDefault();
      const formData = new FormData(this);
      // Convert FormData to a plain object for logging, if needed
      const formObject: { [key: string]: any } = {};
      formData.forEach((value, key) => {
        formObject[key] = value;
      });
      console.log("Datos del formulario:", formObject);
      alert(
        "Formulario enviado (simulación). Revisa la consola para ver los datos."
      );
      // Example fetch call:
      /*
      fetch('/api/registrar-pago', { 
        method: 'POST', 
        body: formData 
      })
      .then(response => {
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        return response.json();
      })
      .then(data => {
        console.log('Respuesta del servidor:', data);
        alert('Pago registrado exitosamente!');
        form.reset(); // Reset form after successful submission
        if(fileChosenSpan) fileChosenSpan.textContent = 'Ningún archivo seleccionado';
      })
      .catch(error => {
        console.error('Error al registrar el pago:', error);
        alert(`Error al registrar el pago: ${error.message}`);
      });
      */
    });
  }
</script>
