---
import { Image } from "astro:assets";

interface Props {
  images: string[];
}

const { images } = Astro.props as Props;
---

<div class="relative">
  <!-- Controles -->
  <button
    class="absolute left-2 top-1/2 transform -translate-y-1/2 z-10 bg-black/60 text-white p-2 rounded-full hover:bg-black/80"
    onclick="scrollGallery(-1)"
    aria-label="Anterior"
  >
    ←
  </button>

  <button
    class="absolute right-2 top-1/2 transform -translate-y-1/2 z-10 bg-black/60 text-white p-2 rounded-full hover:bg-black/80"
    onclick="scrollGallery(1)"
    aria-label="Siguiente"
  >
    →
  </button>

  <!-- Galería -->
  <div
    id="gallery"
    class="flex overflow-x-auto gap-0 p-4 scroll-smooth snap-x snap-mandatory [&::-webkit-scrollbar]:hidden"
  >
    {
      images.map((src, i) => (
        <div
          class="flex-shrink-0 w-screen sm:w-[400px] aspect-[3/2] overflow-hidden snap-start cursor-pointer"
          onclick={`openLightbox(${i})`}
        >
          <Image
            src={src}
            width={600}
            height={400}
            alt={`Imagen ${i + 1}`}
            class="w-full h-full object-cover"
            loading="lazy"
          />
        </div>
      ))
    }
  </div>
  <div class="flex justify-center">
    <a
      href="/programas"
      class="inline-block bg-yellow-500 hover:bg-yellow-700 text-black text-lg font-bold py-4 px-8 rounded-full transition-colors duration-300"
    >
      ¡Inscribete!
    </a>
  </div>

  <!-- Lightbox -->
  <div
    id="lightbox"
    class="fixed inset-0 bg-black/90 z-50 hidden items-center justify-center"
  >
    <button
      onclick="closeLightbox()"
      class="absolute top-4 right-4 text-white text-4xl hover:text-gray-300"
      aria-label="Cerrar"
    >
      ×
    </button>
    <button
      onclick="changeLightboxImage(-1)"
      class="absolute left-4 text-white text-4xl hover:text-gray-300"
      aria-label="Anterior"
    >
      ←
    </button>
    <button
      onclick="changeLightboxImage(1)"
      class="absolute right-4 text-white text-4xl hover:text-gray-300"
      aria-label="Siguiente"
    >
      →
    </button>
    <img
      id="lightbox-image"
      src=""
      alt=""
      class="max-h-[90vh] max-w-[90vw] object-contain"
    />
  </div>
</div>

<script>
  declare global {
    interface Window {
      scrollGallery: (dir: number) => void;
      openLightbox: (index: number) => void;
      closeLightbox: () => void;
      changeLightboxImage: (dir: number) => void;
    }
  }

  const scrollAmount = 320;
  const gallery = document.getElementById("gallery");
  const lightbox = document.getElementById("lightbox");
  const lightboxImage = document.getElementById(
    "lightbox-image"
  ) as HTMLImageElement;
  const images = Array.from(document.querySelectorAll("#gallery img")).map(
    (img) => (img as HTMLImageElement).src
  );
  let currentImageIndex = 0;

  window.scrollGallery = (dir: number) => {
    gallery?.scrollBy({ left: dir * scrollAmount, behavior: "smooth" });
  };

  window.openLightbox = (index: number) => {
    if (lightbox && lightboxImage) {
      currentImageIndex = index;
      lightboxImage.src = images[index];
      lightbox.classList.remove("hidden");
      lightbox.classList.add("flex");
      document.body.style.overflow = "hidden";
    }
  };

  window.closeLightbox = () => {
    if (lightbox) {
      lightbox.classList.add("hidden");
      lightbox.classList.remove("flex");
      document.body.style.overflow = "";
    }
  };

  window.changeLightboxImage = (dir: number) => {
    currentImageIndex =
      (currentImageIndex + dir + images.length) % images.length;
    if (lightboxImage) {
      lightboxImage.src = images[currentImageIndex];
    }
  };

  // Cerrar lightbox con la tecla Escape
  document.addEventListener("keydown", (e) => {
    if (e.key === "Escape") {
      window.closeLightbox();
    }
  });

  let autoplay = setInterval(() => {
    gallery?.scrollBy({ left: scrollAmount, behavior: "smooth" });
  }, 4000);

  gallery?.addEventListener("mouseenter", () => clearInterval(autoplay));
  gallery?.addEventListener("mouseleave", () => {
    autoplay = setInterval(() => {
      gallery?.scrollBy({ left: scrollAmount, behavior: "smooth" });
    }, 4000);
  });
</script>
